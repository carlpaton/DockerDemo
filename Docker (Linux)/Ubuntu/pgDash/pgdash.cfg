#
# This is the configuration file for self-hosted/on-premise version of pgDash.
# It should be present as /etc/pgdash/pgdash.cfg, and should be readable at least
# by the user "pgdash" or the group "pgdash".
#

#-------------------------------------------------------------------------------
# General settings

# The bind address that the pgDash web server should listen to, in "ip:port"
# format. If "ip" is omitted, listens on all interfaces. To use an IPv6 ip,
# enclose in square brackets, like "[ip.v.6.ip]:8080".
listen = ":8080"
#listen = ":80"

# pgDash stores all its data in a PostgreSQL database. The 'dsn' key should
# contain libpq-style parameters [1] to connect to a PostgreSQL database.
# We recommend a dedicated database and a dedicated PostgreSQL user for pgdash.
# pgDash will run DDL commands to create/update the schema as needed.
# [1] https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-PARAMKEYWORDS
#dsn = 'host=/var/run/postgresql dbname=pgdash TimeZone=UTC'
dsn = 'host=10.3.99.20 user=dbadmin dbname=pgdash'

# If pgDash is hosted behind a reverse proxy, set the full external URL to
# pgDash in 'exturl'. For example, to host pgDash at https://corp.example.com/pgdash
# behind an nginx server, use:
# # nginx conf:
# location /pgdash/ {
#     proxy_pass http://pgdash.internal:8080/;
# }
# # pgdash conf: 
# exturl = 'https://corp.example.com/pgdash/'
#
#exturl = 'https://corp.example.com/pgdash/'

# pgDash has a built-in webserver. It's access log can be written to the file
# /var/log/pgdash/access.log. By default this is disabled. It can be enabled
# by setting 'accesslog' to true.
#accesslog = false

#-------------------------------------------------------------------------------
# Email settings
#
# pgDash sends out emails for signup email verification, password reset, alerts
# and weekly notifications. For this to work, it needs to connect to an SMTP
# server which has to be defined here.
#
# AUTH and STARTTLS are supported.
[smtp]
server = "smtp.example.com:587"
from = "pgdash@example.com"
username = "user"
password = "pass"

#-------------------------------------------------------------------------------
# pgDash Application Metrics
#
# pgDash can forward internal app metrics to an InfluxDB instance for
# monitoring and observability.
#[influxdb]
#addr = "http://localhost:8086"
#database = "pgdash"

#-------------------------------------------------------------------------------
# CRON jobs
#
# pgDash has a built-in internal CRON "daemon". The following cron jobs are
# scheduled to perform various housekeeping activities regularly. Each job
# definition starts with "[cronjob.JOBNAME]". The key "spec" is like a regular
# cron job spec, but has an additional, initial field for seconds also. The
# "commands" are a list of internal command names and their arguments, which
# are executed in order. Times are in server's time zone.

# job runs 1.00 AM each day, bunch of cleanup tasks
[cronjob.cleanup]
spec = "0 0 1 * * *"
commands = [
    # delete all sessions created earlier than 7 days
    "sessions.prune 7",
    # delete all obsolete quick view reports
    "quickview.reap",
    # delete all event log records older than 30 days
    "eventlog.prune 30"
]

# prune timeseries as per retention settings, @ 1.30 AM each day,
# followed by a vacuum and analyze
[cronjob.retention]
spec = "0 30 1 * * *"
commands = [
    # cleans up old time series data, as per users.retention
    "timeseries.prune",
    # runs a VACUUM command
    "vacuum",
    # runs an ANALYZE command
    "analyze"
]

# send out weekly notificatons every monday at 9.30 AM
[cronjob.monday_mails]
spec = "0 30 9 * * MON"
commands = [ "mondaymails -7 -1" ]
